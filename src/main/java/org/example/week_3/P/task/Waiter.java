package org.example.week_3.P.task;

import java.util.Random;
import java.util.concurrent.BlockingQueue;

class Waiter extends Thread {

    private int id;
    private final BlockingQueue<Order> queue;
    private final Random random = new Random();
    private static int orderCounter = 1; // –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤

    public Waiter(int id_waiter, BlockingQueue<Order> queue) {
        this.id = id_waiter;
        this.queue = queue;
    }

    @Override
    public void run() {
        try {
            while (true) {

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ
                String[] dishes = {"–ü–∏—Ü—Ü–∞", "–ë—É—Ä–≥–µ—Ä", "–°—É—à–∏", "–ü–∞—Å—Ç–∞", "–°—Ç–µ–π–∫"};
                String dishName = dishes[random.nextInt(dishes.length)];
                int cookingTime = (random.nextInt(3) + 2) * 2000; // –æ—Ç 4 –¥–æ 6 —Å–µ–∫—É–Ω–¥

                // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                Order order = new Order(orderCounter++, dishName, cookingTime);

                queue.put(order); // –ö–ª–∞–¥–µ–º –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å
                System.out.println("üìù –û—Ñ–∏—Ü–∏–∞–Ω—Ç " + id + " ----------> ‚Ññ" + order.getId() +
                                " (" + dishName + ") ");

                Thread.sleep(4000); // –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
